{"version":3,"sources":["components/SwitchAnimation/SwitchAnimation.module.css","pages/Page1.jsx","pages/Page2.jsx","components/SwitchAnimation/SwitchAnimation.jsx","App.js","serviceWorker.js","index.js","App.module.css"],"names":["module","exports","Page1","SwitchAnimation","useState","isAnimationStart","setIsAnimationStart","pathname","useLocation","useEffect","setTimeout","ENTER_ANIMATION_TIMEOUT","CSSTransition","in","timeout","enter","exit","classNames","styles","className","curtain","App","root","Helmet","title","to","red","href","target","rel","path","Page2","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,QAAU,iCAAiC,MAAQ,+BAA+B,YAAc,qCAAqC,KAAO,8BAA8B,WAAa,sC,+LCG1LC,EAFD,kBAAM,uCCELA,EAFD,kBAAM,uC,iCC0CLC,EA7BS,WAAO,IAAD,EACoBC,oBAAS,GAD7B,mBACrBC,EADqB,KACHC,EADG,KAEpBC,EAAaC,cAAbD,SAaR,OAXAE,qBACE,kBAAM,WACJH,GAAoB,GAEpBI,YAAW,WACTJ,GAAoB,KAXCK,QAczB,CAACJ,IAID,kBAACK,EAAA,EAAD,CACEC,GAAIR,EACJS,QAAS,CACPC,MA1BwB,IA2BxBC,KAxBuB,KA0BzBC,WAAYC,KAEZ,yBAAKC,UAAWD,IAAOE,YCoBdC,MAjDf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKF,UAAWD,IAAOI,MACrB,kBAACC,EAAA,EAAD,CAAQC,MAAM,iBACd,4BAAQL,UAAU,cAChB,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMM,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,YAKN,uBAAGN,UAAWD,IAAOQ,KAArB,QACO,4CADP,wBAGA,uBACEP,UAAU,WACVQ,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAEJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,UACV,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,yCAOV,kBAAC,EAAD,QC1CcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBExI5BlD,EAAOC,QAAU,CAAC,KAAO,qB","file":"static/js/main.4e96dd38.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"curtain\":\"SwitchAnimation_curtain__26d1V\",\"enter\":\"SwitchAnimation_enter__2d5gx\",\"enterActive\":\"SwitchAnimation_enterActive__1_J3D\",\"exit\":\"SwitchAnimation_exit__2Q2eS\",\"exitActive\":\"SwitchAnimation_exitActive__3kSXm\"};","import React from 'react';\n\nconst Page1 = () => <h1>Page 1</h1>\n\nexport default Page1\n\n","import React from 'react';\n\nconst Page1 = () => <h1>Page 2</h1>\n\nexport default Page1\n\n","import React, { useEffect, useState } from 'react'\n\nimport { useLocation } from 'react-router-dom'\nimport { CSSTransition } from 'react-transition-group'\n\nimport styles from 'src/components/SwitchAnimation/SwitchAnimation.module.css'\n\n// Should be same as --enter-animation-timeout in styles\nconst ENTER_ANIMATION_TIMEOUT = 500\n// Should be same as sum of --exit-animation-timeout\n// and --exit-animation-delay in styles\nconst EXIT_ANIMATION_TIMEOUT = 400\n\nconst fullAnimationTimeout = ENTER_ANIMATION_TIMEOUT + EXIT_ANIMATION_TIMEOUT\n\nconst SwitchAnimation = () => {\n  const [isAnimationStart, setIsAnimationStart] = useState(false)\n  const { pathname } = useLocation()\n\n  useEffect(\n    () => () => {\n      setIsAnimationStart(true)\n\n      setTimeout(() => {\n        setIsAnimationStart(false)\n      }, fullAnimationTimeout)\n    },\n    [pathname]\n  )\n\n  return (\n    <CSSTransition\n      in={isAnimationStart}\n      timeout={{\n        enter: ENTER_ANIMATION_TIMEOUT,\n        exit: EXIT_ANIMATION_TIMEOUT,\n      }}\n      classNames={styles}\n    >\n      <div className={styles.curtain} />\n    </CSSTransition>\n  )\n}\n\nexport default SwitchAnimation\n","import React from 'react'\nimport { Helmet } from 'react-helmet'\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\n\nimport styles from 'src/App.module.css'\n\nimport Page1 from 'src/pages/Page1'\nimport Page2 from 'src/pages/Page2'\nimport SwitchAnimation from 'src/components/SwitchAnimation/SwitchAnimation'\n\nfunction App() {\n  return (\n    <Router>\n      <div className={styles.root}>\n        <Helmet title=\"Hello React!\" />\n        <header className=\"App-header\">\n          <nav>\n            <ul>\n              <li>\n                <Link to=\"/\">Home</Link>\n              </li>\n              <li>\n                <Link to=\"/page1\">About</Link>\n              </li>\n              <li>\n                <Link to=\"/page2\">Users</Link>\n              </li>\n            </ul>\n          </nav>\n\n          <p className={styles.red}>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <Switch>\n              <Route path=\"/page2\">\n                <Page2 />\n              </Route>\n              <Route path=\"/page1\">\n                <Page1 />\n              </Route>\n              <Route path=\"/\">\n                <h2>home</h2>\n              </Route>\n            </Switch>\n          </a>\n        </header>\n      </div>\n\n      <SwitchAnimation />\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nimport 'normalize.css/normalize.css'\nimport './vars.css'\nimport './main.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"App_root__2h8CC\"};"],"sourceRoot":""}